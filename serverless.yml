service: hills-api

provider:
  name: aws
  region: ${opt:region, '${file(./serverless-shared.yml):constants.defaultRegion}'}
  runtime: nodejs10.x # matches package.json:engines
  stage: ${opt:stage, 'dev'}
  timeout: 6 # seconds, sls default is 6, aws default is 3
  # Only the graphql lambda needs this, but a single shared role is much easier to configure
  iamRoleStatements:
    - Effect: Allow
      Action:
        - rds-data:ExecuteStatement
      Resource: arn:cluster
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource: arn:secret

plugins:
  - serverless-offline
  - serverless-plugin-git-variables
  - serverless-prune-plugin

package:
  exclude:
    - ./**
    - '!./node_modules/**' # don't re-include this; it'd override excludeDevDependencies
  excludeDevDependencies: true # default is true; fyi
  include:
    - src/**/!(*.spec).js

#
# API Gateway proxy integration, which is the simplest method and Serverless' default.
#
# There are arguments for and against, but for a lambda that's only ever called via
# API Gateway it seems to be an ok choice. The lambda really only needs to accept a
# GraphQL string and variables, and return JSON, so it shouldn't need to even know what
# a HTTP request is. If API Gateway would abstract that away, the lambda would be
# purer and could be called by means other than HTTP. As long as we need to use
# express-graphql (and hence express) though (see other comment), that can't happen.
#
# For:     https://www.stackery.io/blog/why-you-should-use-api-gateway-proxy-integration-with-lambda
# Against: https://read.acloud.guru/how-you-should-and-should-not-use-the-api-gateway-proxy-integration-f9e35479b993
#
functions:
  graphql:
    handler: src/graphql.fn
    description: ${self:custom.versionInfo}
    # reservedConcurrency cannot be specified on the provider - https://github.com/serverless/serverless/issues/5472
    reservedConcurrency: 1 # low value until API Gateway throttling configured
    environment:
      DATABASE_CLUSTER_ARN: arn:cluster
      DATABASE_CLUSTER_SECRET_ARN: arn:secret
    events:
      - http:
          path: graphql
          method: post
      - http:
          path: graphql
          method: get
  playground:
    handler: src/playground.fn
    description: ${self:custom.versionInfo}
    reservedConcurrency: 1 # low value until API Gateway throttling configured
    events:
      - http:
          path: playground
          method: get

custom:
  exportGitVariables: false
  prune:
    automatic: true
    number: 3
  versionInfo: ${git:branch}:${git:describeLight} isDirty=${git:isDirty} "${git:message}"
